/*
 * Copyright 2013-2019 The NATS Authors
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

var url = require("url");
var dns = require("dns");

// Mapping function for A records
function mapA(u) {
    return function(a) {
        return a.map(function(s) {
            var auth = "";
            if (u.auth) {
                auth = u.auth + "@";
            }
            var hostport = s;
            if(u.port) {
                hostport += ":" + u.port;
            }
            return u.protocol + "//" + auth + hostport;
        });
    };
}

// Mapping function for SRV records
function mapSrv(u) {
    return function(a) {
        return a.map(function(s) {
            var auth = "";
            if (u.auth) {
                auth = u.auth + "@";
            }
            var hostport = s.name;
            if(s.port) {
                hostport += ":" + s.port;
            }
            return u.protocol + "//" + auth + hostport;
        });
    };
}

// expand takes a natsurl, and performs a resolution on the records type of
// the host in the natsurl and returns a list of nats urls with all the
// resolved hosts for the record. It only supports "A" and "SRV" records,
// but additional record types can be parsed by simply providing a new
// mapping function.
//
// expand("nats://user:pass@host:4222", "A", function(err, values) {
//     console.log(values);
// });
//
// expand("nats://user:pass@host.com", "SRV", function(err, values) {
//     console.log(values);
// });
//
function expand(natsurl, type, callback) {
    var u = url.parse(natsurl);
    type = type.toUpperCase();
    var fun = null;
    switch(type) {
        case "A":
            fun = mapA(u);
            break;
        case "SRV":
            fun = mapSrv(u);
            break;
        default:
            callback(new Error("unsupported type: " + type));
    }
    dns.resolve(u.hostname, type, function(err, records){
        if(err) {
            callback(err);
            return;
        }
        callback(undefined, fun(records));
    });
}

